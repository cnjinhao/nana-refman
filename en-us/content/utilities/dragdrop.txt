|name	=nana::dragdrop
|header	=<nana/gui/dragdrop.hpp>
|decl	=#class dragdrop;#
:The class dragdrop provides support of drag-and-drop operation. Unlike #class [[simple_dragdrop]/utilities/simple_dragdrop]#, the dragdrop can transfer data between different processes.
:
:The data to be transferred by the drag-and-drop operation is contained in a #dragdrop::data# object. The #dragdrop::data# object is created in a user-defined function in following way:
```
dragdrop dnd{fm};
dnd.prepare_data([]{
	dragdrop::data data;
	data.insert(std::filesystem::path{"/home/me/file.txt"}); //full path
	return data;
});
```
:Unlike #class [[simple_dragdrop]/utilities/simple_dragdrop]#, class #dragdrop# didn't need a target. When user presses the left mouse button and drags the mouse, the #class dragdrop# prepares the data to be transferred.

==member types==
data
:A data type which contains the transferred data.

==member functions==
constructors
:construct an instance
decl=#dragdrop(window source);#
decl=#dragdrop(const dragdrop&) = delete;#
decl=#dragdrop& operator=(const dragdrop&) = delete;#
decl=#dragdrop(dragdrop&&) = delete;#
decl=#dragdrop& operator=(dragdrop&&) = delete;#
:Constructs an instance:
:  0) Constructs an instance with a window. When the instance is instanced, the window immediately becomes dragdrop source window that user can drag the draggable content out of the window
:  1,2,3,4) The copy and move constructors are deleted. The object of *dragdrop* is not copyable and movable.
source
:Handle to a window that can be a source for drag-and-drop operation.
--except--
std::invalid_argument
:throws if source is invalid.
--end--

condition
:sets a condition checker
decl=#void condition(std::function<bool()> predicate_fn);#
:Sets a condition checker that determines whether the drag-and-drop operation can start. If a condition checker is not set, it always start drag-and-drop operation.
--parameters--
predicate_fn
:Unary predicate which returns #true# for starting drag-and-drop operation.
--end--

prepare_data
:transferred data
decl=#void prepare_data(std::function<data()> generator);#
:Sets a generator that makes the transferred data.
--parameters--
generator
:Unary function which returns a #dragdrop::data# object that contains the transferred data.
--end--

drop_finished
:drop handler
decl=#void drop_finished(std::function<void(bool dropped, dnd_action executed_action, data& data_transferred)> finish_fn);#
:The drop handler will be called when the drag-and-drop operation is finished.
:
:There are 3 parameters for the drop handler:
:  0) dropped. Indicates whether the data is accepted by a target window.
:  1) executed_action. Indicates the action returned by target window. Ignore if dropped is false.
:  2) data_transferred The data object which is generated by the generator.
--parameters--
finish_fn
:The drop handler function.
--end--

==see also==
[[simple_dragdrop]/utilities/simple_dragdrop]
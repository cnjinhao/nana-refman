|name	=nana::textbox
|header	=<nana/gui/widgets/textbox.hpp>
|decl	=#class textbox;#
:The textbox provides a widget that is used to input and display text. It supports the 3 text display modes,single line, multiplie lines and line wrap.

==base==
[[widget_object<category::widget_tag>]//./widgets/widget_object_widget_tag.htm] : public [[widget]]

==events==
[[general events]//./core/events.htm]
#first_change(const [[arg_textbox]]&)#
:occurs when the text first changes after text has been opened or stored
#text_changed(const [[arg_textbox]]&)#
:occurs when the text is changed
#text_exposed(const [[arg_textbox]]&)#
:occurs when the line numbers of text that are displayed on screen are changed

==member types==
[[colored_area_type]][#1.5]
:defines highlight scheme for the specified lines
[[colored_area_access_interface]][#1.5]
:interface for manipulating the highlights of lines

[[text_focus_behavior]]
:behaviors when the focus changes
text_positions
:text coordinates of beginning of lines, Typedef name of std::vector<nana::upoint>
path_type[#1.7]
:typedef name of std::filesystem::path

==scheme==
selection
:background color of selected text
selection_unfocused
:background color of selected text when textbox is not focused
selection_text
:color of selected text
mouse_wheel
:The number of lines/characters to scroll when the vertical/horizontal mouse wheel is moved
tip_string_color[#1.8]
:The color of tip string
tip_string_floating_distance_px[#1.8]
:The distance between tip string and content when the tip string is floating to top on focus, in pixels
tip_string_floating_font_min_pt[#1.8]
:The tip string is hidden when the font size of floating tip is less than the specified size, in points
tip_string_floating_font_factor[#1.8]
:The font size factor of tip string. The max_font_size_of_tip = the_factor * font_size_of_content.

==member functions==
constructors
:constructs a textbox widget instance
decl=#textbox();#
decl=#textbox(window handle, bool visible);#
decl=#textbox(window handle, const std::string& text, bool visible = true);#
decl=#textbox(window handle, const char* text, bool visible = true);#
decl=#textbox(window handle, const rectangle& area = {}, bool visible = true);#
:Constructs a textbox widget instance.
:  0) The default constructor. It constructs the class object, but it doesn't create UI widget.
:  1,2,3,4) Constructs the class object and creates a textbox UI widget.
--parameters--
handle
:a handle to the parent window of the textbox being created
text
:the content of textbox. This parameter only accepts a UTF-8 encoded string
area
:the position and dimension of the textbox, the coordinate is relative to the upper-left corner of the parent window
visible
:indicates whether to show or hide the textbox widget
--end--

content_origin[#1.5.4]
:left-upper coordinate of text area
decl=#point content_origin() const;#
:Returns the coordinate of text area left-upper point in view of text.
:An [[example]//https://github.com/qPCR4vir/nana-demo/blob/master/Examples/textbox_line_number.cpp] calcuates the position of top displayed line in y-axis through content_origin.
--returns--
:left-upper point
--end--

---Behaviors---
editable
:enables/disables the user input
decl=#bool editable() const;#
decl=#textbox& editable(const enable);#
:If the text is not editable, user can not edit the content of textbox.
:    0) Determines whether the textbox is editable.
:    1) Enables/disables the user input.
--parameters--
enable
:indicates whether to enable or disable the user input.
--returns--
:0) #true# if the textbox is editable, #false# otherwise.
:1) The reference of #*this#.
--end--

edited
:determines whether the content is edited
decl=#bool edited() const;#
:Determines whether the content is edited.
--returns--
:#true# if the content is edited, #false# otherwise.
--end--

edited_reset
:resets the edited flag
decl=#textbox& edited_reset();#
:Manually resets the edited flag to false.
--returns--
:The reference of #*this#.
--end--

focus_behavior
:sets the behavior when textbox gets focus
decl=#void focus_behavior([[text_focus_behavior]] behavior);#
:Sets the behavior of textbox when it gets focus.
--parameters--
behavior
:The behavior
--end--

indention
:indents a new line
decl=#textbox& indention(bool enable, std::function<std::string()> generator = {});#
:Enables/disables the textbox to indent a new line.
--parameters--
enable
:indicates whether to enable or disable the indention of new line
generator
:generates text for identing a new line. If this paremeter is empty, the textbox indents the new line according to the last line
--returns--
:The reference of #*this#.
--end--

line_wrapped
:enables/disables the line wrapped text mode
decl=#bool line_wrapped() const;#
decl=#textbox& line_wrapped(bool enable);#
:A line wrapped mode is to break a text into lines that it will fit in the available width of textbox. The  textbox is also word wrapped.
:  0) Determines whether the textbox is line wrapped.
:  1) Enables/disables the line wrapped mode of the textbox.
--parameters--
enable
:indicates whether to enable or disable the line wrapped mode. If this parameter is #true#, the line wrapped mode is on. If the parameter is #false#, the line wrapped mode is off
--returns--
:0) #true# if it is line wrapped, #false# otherwise.
:1) The reference of #*this#.
--end--

multi_lines
:enables/disables the multiple lines mode
decl=#bool multi_lines() const;#
decl=#textbox& multi_lines(bool enable);#
:The multiple lines mode allow user to insert a new line by pressing enter.
:  0) Determines whether the textbox is multiple lines.
:  1) Enables/disables the multiple lines mode.
--parameters--
enable
:indicates whether to enable or disable the multiple lines mode. If this parameter is #true#, it enables the multiple lines mode. If the parameter is #false#, it disables the multiple lines mode
--returns--
:0) #true# if the textbox is multiple lines mode, #false# otherwise.
:1) The reference of #*this#.
--end--

padding[#1.8]
:sets the padding area
decl=#textbox& padding(unsigned top, unsigned right, unsigned bottom, unsigned left);#
:Sets the padding area for 4 sides.
--parameters--
top
:top area between content and top edge, in pixels.
right
:right area between content and right edge, in pixels.
bottom
:bottom area between content and bottom edge, in pixels.
left
:left area between content and bottom edge, in pixels.
--returns--
: The reference of #*this#.
--end--

---Caret---
caret_pos[#1.5.4]
:the position of caret
decl=#bool caret_pos(point& pos, bool text_coordinate) const;#
decl=#upoint caret_pos() const;[#1.5.4]#
decl=#textbox& caret_pos(const upoint& pos);#
:Gets/sets the position of caret.
:  0) Gets the position of caret.
:  1) Gets the position of caret in text coordinate.
:  2) Sets the position of caret in text coordinate.
--parameters--
pos
:position of caret
text_coordinate
:indicates whether to get the text position of caret or get the screen position of caret. If this parameter is #true#, it returns the position by the text coordinate. If the parameter is #false#, it returns the position by the window coordinate
--returns--
:0), #true# if the caret is in the area of visibility. #false# otherwise.
:1), The position of caret in text coordinate.
:2), The reference of #*this#.
--end--

enable_caret[#1.4.1]
:enables the caret
decl=#textbox& enable_caret();#
:Enables the caret if the textbox currently is not editable. When a uneditable textbox enables caret, user can move the caret and select the section of content to copy.
--returns--
:The reference of #*this#.
--end--

select_behavior
:Sets the caret move behavior when the content of textbox is selected
decl=#void select_behavior(bool move_to_end);#
:Whether caret moves to left of selected content or moves to left of last position when left arrow key is pressed.
--parameters--
move_to_end
:indicates whether to move caret to left of selected content or to left of last position
--end--

selection[#1.4.1]
:returns the bounds of a text selection
decl=#std::pair<upoint, upoint> selection() const;#
:Returns the bounds of a text selection.
:  If pair.first != pair.second, the pair.first is the front bound, the pair.second is the back bound.
:  If pair.first == pair.second, no text selection.
--returns--
:a pair of points for the text selection. There is not a selection if pair.first == pair.second.
--end--

---Content access---
getline[#1.6.2]
:read a line of content
decl=#bool getline(std::size_t pos, std::string& text) const;#
decl=#bool getline(std::size_t pos, std::size_t offset, std::string& text) const;#
decl=#std::optional<std::string> getline(std::size_t pos) const;#
decl=#std::optional<std::string> getline(std::size_t pos, std::size_t offset) const;#
--parameters--
pos
:the index of line which text to be requested.
text
:a string variable receives the text of line.
offset
:position of the first character to include.
--returns--
:0,1) returns #true# if successful.
:2,3) returns an empty optional if failed.
--end--

---File operations---
filename[#1.7]
:the file of last store opertion
decl=#std::string filename() const;#
:Returns the name of file of last store operation.
--returns--
:The name of the file.
--end--

load[#1.7]
:loads a text file
decl=#void load(std::string filename);#[#!1.7]
decl=#void load(const path_type& filename);#[#1.7]
:Loads a text file. When attempt to load a unicode encoded text file, be sure the file has a BOM header.
--parameters--
filename
:the name of the file to be opened. Before 1.7, this parameter only accepts a UTF-8 encoded string
--end--

saved
:determines the content is saved
decl=#bool saved() const;#
:Determines the changed content has been saved into a file.
--returns--
:#true# if the content is saved, #false# otherwise.
--end--

store[#1.7]
:writes to a text file
decl=#void store(std::string filename);#[#!1.7]
decl=#void store(std::string filename, unicode encoding);#[#!1.7]
decl=#void store(const path_type& filename);#[#1.7]
decl=#void store(const path_type& filename, unicode encoding);#[#1.7]
:Writes the content of textbox to a text file.
:  0,2) Writes to a file with local system encoding.
:  1,3) Writes to a file with Unicode encoding.
--parameters--
filename
:the name of the file to be written. Before 1.7, this paremter only accepts a UTF-8 encoded string
encoding
:indicates a specified UTF
--end--

---Highlight---
colored_area_access[#1.5]
:highlight lines
decl=#[[colored_area_access_interface]]* colored_area_access();#
:Returns a pointer which points to an interface for coloring lines.
--returns--
:A pointer which points to an interface for coloring lines.
--end--

set_highlight
:set a highlight
decl=#void set_highlight(const std::string& name, const color& fgcolor, const color& bgcolor);#
:Sets foreground color and background color of the highlight through a specified name. If the name is not existing, it creates a new highlight.
--parameters--
name
:The name of new highlight
fgcolor
:Foreground color
bgcolor
:Background color
--end--

erase_highlight
:erases a highlight
decl=#void erase_highlight(const std::string& name);#
:Erases a highlight with a specified name. No highlight will be removed if name doesn't exist.
--parameters--
name
:name of the highlight to remove
--end--

set_keywords
:sets keywords for a highlight
decl=#void set_keywords(const std::string& name, bool case_sensitive, bool whole_word_match, std::initializer_list<std::wstring> kw_list);#
decl=#void set_keywords(const std::string& name, bool case_sensitive, bool whole_word_match, std::initializer_list<std::string> kw_list_utf8);#
:Sets keywords for the highlight with the specified name.
--parameters--
name
:name of the highlight to set
case_sensitive
:indicates whether the keyword is case sensitive
whole_word_match
:indicates whether the keyword is whole word match
kw_list
:keywords
kw_list_utf8
:keywords in UTF-8 encoded
--end--

erase_keyword
:erases a keyword
decl=#void erase_keyword(const std::string& kw);#
:Erases a keyward.
--parameters--
kw
:the keyword to remove
--end--

---Modifiers---
mask
:sets a mask character
decl=#textbox& mask(wchar_t mask_char);#
:When the mask is set, textbox will display mask characters instead of real content for hiding special text, something like password.
--parameters--
mask_char
:the mask character. If this parameter is 0, the mask is cleared
--returns--
:The reference of #*this#.
--end--

set_accept
:sets an input predicate
decl=#void set_accept(std::function<bool(wchar_t)> pred);#
:Sets an input predicate which determines whether to accept or refuse the keyboard input depends on specified keys.
```
//Blocks characters 'a' and 'A'
textbox.set_accept([](wchar_t key){
	return !('a' == key || 'A' == key);
});
```
--parameters--
pred
:a function to be applied on the input for determining whether to accept the input.
--end--

set_undo_queue_length[#1.4.1]
:sets the undo queue length
decl=#void set_undo_queue_length(std::size_t len);#
--parameters--
len
:the capacity of the undo queue. If this parameter is 0, the textbox disables the undo/redo capacity
--end--

tip_string
:sets a tip
decl=#textbox& tip_string(std::string text);#
:Tip displays for inforing a user what content should be input when the textbox is empty.
--parameters--
text
:the new tip text in UTF-8 encoded
--returns--
:The reference of #*this#.
--end--


---Observers---
display_line_count/text_line_count[#1.5.2]
:returns the number of lines
decl=#std::size_t display_line_count() const noexcept;#
decl=#std::size_t text_line_count() const noexcept;#
:Returns the number of lines
:  1) Returns the number of lines that text is renderred in the textbox. It may return a different number which is not equal to the number of text lines when the textbox is line wrapped mode, becase a very long text is breaked into lines when the width of textbox doesn't fit.
:  2) Returns the number of text lines.
--returns--
:1) the number of lines that text is renderred in the textbox.
:2) the number of text lines.
--end--

line_pixels
:returns the height of a line
decl=#unsigned line_pixels() const;#
:Returns the height of a line, in pixel. It depends on the font.
--returns--
:The height of a line.
--end--

text_area
:returns the rectangle of text area
decl=#rectangle text_area() const;#
:Returns the rectangle of text area, excluding scroll bars.
--returns--
:The rectangle of text area.
--end--

text_position
:returns the positions of displaying lines
decl=#text_positions text_position() const;#
:Returns the positions of lines that currently display on screen, in text coordinate.
:
:[[Show Line Numbers]//https://sourceforge.net/p/nanapro/blog/2016/04/nana-example---show-line-numbers/]
--returns--
:The positions.
--end--

---Operations---
append
:appends an string
decl=#textbox& append(const std::string& text, bool at_caret);#
:Appends an string.
--parameters--
text
:text to append
at_caret
:indicates whether to insert text into textbox at the position of caret or append text to the end of content
--returns--
:The reference of #*this#.
--end--

copy
:copies the selected content
decl=#void copy() const;#
:Copies the selected part of content into system shared memory, such as clipboard.
--end--

del
:deletes content
decl=#void del();#
:If the content is selected, it deletes the selected content, otherwise it deletes a character which the caret positions.
--end--

paste
:pastes the content
decl=#void paste();#
:Pastes the content from the system shared memory, such as clipboard.
--end--

select/selected
:selects the content
decl=#void select(bool sel);#
decl=#bool selected() const;#
:Selects the content.
:  0) Selects or unselects the whole content.
:  1) Determines whether the content is selected.
--parameters--
sel
:indicates whether to select or unselect the whole content
--returns--
:1) #true# if the content is selected, #false# otherwise.
--end--

number conversion
:conversion between content and number.
decl=#int to_int() const;#
decl=#double to_double() const;#
decl=#textbox& from(int i);#
decl=#textbox& from(double d);#
:Conversion between content and number.
:  0,1) Converts the content to number.
:  2,3) Assign the content through a number.
--returns--
:0,1) Returns an number. If the content is empty, it returns 0.
:2,3) The reference of #*this#.
--end--

==remark==
:[[Highlighting Words]//https://github.com/cnjinhao/nana/wiki/Textbox-:-Highlighting-Words]
:Highlight all occurences of specific words in the text.
:
:[[Show Line Numbers]//https://sourceforge.net/p/nanapro/blog/2016/04/nana-example---show-line-numbers/]
:Use a panel to display the line numbers.
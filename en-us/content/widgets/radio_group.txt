|name	=nana::radio_group
|header =<nana/gui/widgets/checkbox.hpp>
|decl	=#class radio_group;#
:The #class radio_group# is helper for managing the checkboxes in radio mode.

==data members==
npos
:a static unsigned integer constant, it indicates the invalid option.

==member functions==
add
:adds a checkbox
decl=#void add(checkbox& chkbox);#
--parameters--
chkbox
:reference to a checkbox
--end--

checked
:returns the index of the checked option
decl=#std::size_t checked() const;#
:Returns the index of option which is checked checkbox.
--returns--
:the index of checked checkbox. #radio_group::npos# if no checkbox is checked.
--end--

size
:the number of options
decl=#std::size_t size() const;#
:Returns the number of options.
--returns--
:the number of options.
--end--

---Events---
on_clicked[#1.7.1]
:registers a click event handler
decl=#template<typename Function> void on_clicked(Function&& fn);#
--parameters--
fn
:a function of click event handler. It can have no parameter or one parameter which is #const arg_click&#.
--end--

on_checked[#1.7.1]
:registers a check event handler
decl=#template<typename Function> void on_checked(Function&& fn);#
--parameters--
fn
:a function of check event handler. It can have no parameter or one parameter which is #const arg_checkbox&#.
--end--

==remark==
```
#include <nana/gui.hpp>
#include <nana/gui/widgets/checkbox.hpp>
#include <vector>
#include <memory>

int main()
{
	using namespace nana;

	form fm;
	
	std::vector<std::unique_ptr<checkbox>> options;
	radio_group rd_group;
	fm.div("vert margin=10 radio");

	for (int i = 0; i < 5; ++i)
	{
		options.emplace_back(new checkbox{ fm.handle() });
		options.back()->caption(std::to_string(i));
		fm["radio"] << *options.back();

		rd_group.add(*options.back());
	}

	rd_group.on_checked([&](const arg_checkbox& arg){
		//When a checkbox is unchecked, the checked event will be emitted,
		//Filter out the event if it is unchecked.
		if (!arg.widget->checked())
			return;

		auto pos = rd_group.checked();
	});

	rd_group.on_clicked([&]{
		auto pos = rd_group.checked();
	});

	fm.collocate();
	fm.show();
	
	exec();

}
```

==see also==
[[checkbox]]


|name	=nana::listbox::item_proxy
|header	=<nana/gui/widgets/listbox.hpp>
|decl	=#class listbox::item_proxy;#
:The #class item_proxy# is a manipulator of the listbox items. It is based on concept of [[Input Iterator]//http://www.sgi.com/tech/stl/InputIterator.html].


==member functions==
check/checked[#1.5]
:checks the item
decl=#item_proxy& check(bool checked, bool scroll_view);#
decl=#bool checked() const;#
:Checks the item.
:  0) Checks/unchecks the item.
:  1) Determines whether the item is checked.
--parameters--
checked
:indicates whether to check or uncheck the item. If this paremter is #true#, checks the item. If the parameter is #false#, unchecks the item
scroll_view
:indicates whether to scroll view to the item. It is ignored if the item is displayed on screen
--returns--
:0) The reference of #*this#.
:1) #true# if the item is checked, #false# otherwise.
--end--

column_cast[#1.5]
:converts a position of column between display position and absolute position
decl=#size_type column_cast(size_type col, bool disp_order) const;#
--parameters--
col
:The position of a column, display position or absolute position.
disp_order
: Indicates whether the col is a display position or absolute position. If this parameter is #true#, the col is display position. If the parameter is #false#, the col is absolute position.
--returns--
: Absolute position if disp_order is #false#, display position otherwise.
--end--

columns
:the number of header columns
decl=#size_type columns() const;#
:Returns the number of the listbox's header columns.
--returns--
:The number of header columns.
--end--

displayed[#1.5]
:determines whether the item is displayed on screen
decl=#bool displayed() const;#
:Determines whether the item is displayed on screen. The item is undisplayed if
:0) The category of the item has shrunk.
:1) The display position is out of the screen.
--returns--
:#true# if it is displayed, #false# otherwise.
--end--

empty
:determines whether the item proxy is invalid
decl=#bool empty() const noexcept;#
:Determines whether the item proxy refers to an invalid item.
```
form fm;
listbox list{ fm };

auto x = list.at(0).end().empty();	//x is true. An END item_proxy is empty
```
--returns--
:#true# if it is invalid, #false# otherwise.
--end--

from_display
:access an item through a given display position
decl=#item_proxy from_display(const index_pair& disp_pos) const;#
:Access an item through a given display position.
--parameters--
disp_pos
:a display position of the requested item
--returns--
:The item proxy to the requested item.
--except--
std::out_of_range
:throws if #disp_pos.cat# is invalid.
--end--

pos
:position of the item
decl=#index_pair pos() const;#
:Returns the absolute position of the item.
--returns--
:The absolute position of the item.
--end--

select/selected[#1.5]
:selects the item
decl=#item_proxy& select(bool selected, bool scroll_view = false);#
decl=#bool selected() const;#
:Selects the item.
:  0) Selects/unselects the item.
:  1) Determines whether the item is selected.
--parameters--
selected
:indicates whether to select or unselect the item. If this parameter is #true#, selects the item. If the parameter is #false#, unselects the item
scroll_view
:indicates whether to scroll view to the item. It is ignored if the item is displayed on screen
--returns--
:0) The reference of #*this#.
:1) #true# if the item is selected, #false# otherwise.
--end--

to_display
:returns display position of the item
decl=#index_pair to_display() const;#
:Returns display position of the item. The display position get invalidated after a sort().
--returns--
:The display position of the item.
--end--


---Appearance---
bgcolor
:background color of the item
decl=#item_proxy& bgcolor(const color& clr);#
decl=#color bgcolor() const;#
:Sets/gets the background color of the item.
:  0) Sets the background color.
:  1) Gets the background color.
--parameters--
clr
:new color of the background
--returns--
:0) The reference of #*this#.
:1) Background color of the item.
--end--

fgcolor
:foreground color of the item
decl=#item_proxy& fgcolor(const color& clr);#
decl=#color fgcolor() const;#
:Sets/gets the foreground color of the item.
:  0) Sets the foreground color.
:  1) Gets the foreground color.
--parameters--
clr
:new color of the foreground
--returns--
:0) The reference of #*this#.
:1) Foreground color of the item.
--end--

---Iterators---
operator++
:increment iterator
decl=#item_proxy& operator++();#
decl=#item_proxy operator++(int)#
:Increment iterator.
:  0) Moves the item proxy to the next item.
:  1) Returns a item proxy to the current item, and this category proxy moves to the next item. 
--returns--
:The reference of #*this#.
--end--

operator*
:access the item
decl=#item_proxy& operator*();#
decl=#const item_proxy& operator*() const;#
:Access the item for the STL iterator syntax.
--returns--
:The reference of #*this#.
--end--

operator->
:access the item
decl=#item_proxy* operator->();#
decl=#item_proxy* operator->() const;#
:Access the item for the STL iterator syntax.
--returns--
:The pointer to the item.
--end--

operator==/operator!=
:comparison operators
decl=#bool operator==(const item_proxy& other) const;#
decl=#bool operator!=(const item_proxy& other) const;#
decl=#bool operator==(const char* u8str) const;#
decl=#bool operator==(const wchar_t* str) const;#
decl=#bool operator==(const std::string& u8str) const;#
decl=#bool operator==(const std::wstring& str) const;#
:Comparison operators
:  0,1) Checks whether the given 2 item_proxy iterators are the same.
:  2,3,4,5) Determines whether the text of first column is equal to the specified string.
--parameters--
other
:an item proxy to be compared
u8str
:a UTF-8 encoded string
str
:a wide string
--returns--
:0) #true# if they are same, #false# otherwise.
:1) #true# if they are not same, #false# otherwise.
:2,3,4,5) #true# if the text of the first column is equal to the specified string, #false# otherwise.
--end--


---Access content---
icon
:sets the icon
decl=#void icon(const paint::image& img);#
:Sets the icon of the item
--parameters--
img
:the image for the item
--end--

text[#1.5]
:text of item
decl=#item_proxy& text(size_type abs_col, cell);#
decl=#item_proxy& text(size_type abs_col, std::string u8str);#
decl=#item_proxy& text(size_type abs_col, const std::wstring& str);#
decl=#std::string text(size_type abs_col) const;#
:Sets/gets the text of item by the specified column.
:  0,1,2) Sets the text.
:  3) Gets the text.
--parameters--
abs_col
:the absolute position of requested column
cell
:contains the text, color to set the requested column
u8str
:the new text, in UTF-8 encoded
str
:the new text
--returns--
:0,1,2) The reference of #*this#.
:3) The text of the requested item, in UTF-8 encoded.
--except--
std::out_of_range
:throws if u8str is not in UTF-8 encoded.
std::runtime_error
:throws when the listbox attaches an immutable model container.
--end--

---Resolver---
resolve_from/resolve_to
:resolves an object for item
decl=#template<typename T> item_proxy& resolve_from(const T& obj_from);#
decl=#template<typename T> void resolve_to(T& obj_to) const;#
:Resolves a specified object to/from the item. The type of object should be resolveable for the listbox resolver.
:  0) Resolves the specified object and assigns the resolved content to the item.
:  1) Resolves the specified object and assigns the item to the resoved object.
--parameters--
obj_from
:an object to be resolved for assigning the content to the item
obj_to
:an object to be resloved for receiving the content from the item
--returns--
:0) The reference of #*this#.
--end--

---Associated value---
value_ptr
:access the associated value
decl=#template<typename T> T* value_ptr() const;#
:Access the value which is associated with the item.
--returns--
:Pointer to the value object. #nullptr# if the item has not been associated with a value.
--end--

value
:access the associated value
decl=#template<typename T> T& value() const;#
decl=#template<typename T> T& value();#
decl=#template<typename T> item_proxy& value(T&& t);#
:Access the value object which is associated with the item.
:  0,1) Returns the associated value object.
:  2) Sets a new associated value object.
--parameters--
t
:the new associated value object
--returns--
:0,1) The reference of the associated value object.
:2) The reference of #*this#.
--end--

==see also==
[[listbox]]
[[cat_proxy]/widgets/listbox-cat_proxy]
--end--
